// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


 // } Driver Code Ends
class Solution
{
    public:
    
    //Function to find largest rectangular area possible in a given histogram.
    vector<long long> nser(long long arr[], int n)
    {
        stack<pair<long long,long long>> st;
        vector<long long>index;
        for(long long i=n-1;i>=0;i--)
        {
            while(!st.empty() && st.top().first >=arr[i])
                st.pop();
            if(st.empty())
                index.push_back(n);
            else
                index.push_back(st.top().second);
            st.push({arr[i],i});
        }
        reverse(index.begin(),index.end());
        return index;
    }
    vector<long long> nsel(long long arr[],int n)
    {
        stack<pair<long long,long long>> st;
        vector<long long> index;
        for(long long i=0;i<n;i++)
        {
            while(!st.empty() && st.top().first >=arr[i])
                st.pop();
            if(st.empty())
                index.push_back(-1);
            else
                index.push_back(st.top().second);
            st.push({arr[i],i});

        }
        return index;
    }
    long long getMaxArea(long long arr[], int n)
    {
        vector<long long> l=nsel(arr,n);
        vector<long long> r=nser(arr,n);
        vector<long long> v;
        long long m=INT_MIN;
        for(long long i=0;i<n;i++)
        {
            v.push_back(arr[i]*(r[i]-l[i]-1));
            if(v[i]>m)
                m=v[i];
        }
        return m;
        
        // Your code here
    }
};


// { Driver Code Starts.

int main()
 {
    long long t;

    cin>>t;
    while(t--)
    {
        int n;
        cin>>n;
        
        long long arr[n];
        for(int i=0;i<n;i++)
            cin>>arr[i];
        Solution ob;
        cout<<ob.getMaxArea(arr, n)<<endl;
    
    }
	return 0;
}
  // } Driver Code Ends
